{"ast":null,"code":"var constants = require('./constants');\n\nvar domhandler = require('domhandler/lib/node');\n\nvar CASE_SENSITIVE_TAG_NAMES = constants.CASE_SENSITIVE_TAG_NAMES;\nvar Comment = domhandler.Comment;\nvar Element = domhandler.Element;\nvar ProcessingInstruction = domhandler.ProcessingInstruction;\nvar Text = domhandler.Text;\nvar caseSensitiveTagNamesMap = {};\nvar tagName;\n\nfor (var i = 0, len = CASE_SENSITIVE_TAG_NAMES.length; i < len; i++) {\n  tagName = CASE_SENSITIVE_TAG_NAMES[i];\n  caseSensitiveTagNamesMap[tagName.toLowerCase()] = tagName;\n}\n/**\n * Gets case-sensitive tag name.\n *\n * @param  {string}           tagName - Tag name in lowercase.\n * @return {string|undefined}         - Case-sensitive tag name.\n */\n\n\nfunction getCaseSensitiveTagName(tagName) {\n  return caseSensitiveTagNamesMap[tagName];\n}\n/**\n * Formats DOM attributes to a hash map.\n *\n * @param  {NamedNodeMap} attributes - List of attributes.\n * @return {object}                  - Map of attribute name to value.\n */\n\n\nfunction formatAttributes(attributes) {\n  var result = {};\n  var attribute; // `NamedNodeMap` is array-like\n\n  for (var i = 0, len = attributes.length; i < len; i++) {\n    attribute = attributes[i];\n    result[attribute.name] = attribute.value;\n  }\n\n  return result;\n}\n/**\n * Corrects the tag name if it is case-sensitive (SVG).\n * Otherwise, returns the lowercase tag name (HTML).\n *\n * @param  {string} tagName - Lowercase tag name.\n * @return {string}         - Formatted tag name.\n */\n\n\nfunction formatTagName(tagName) {\n  tagName = tagName.toLowerCase();\n  var caseSensitiveTagName = getCaseSensitiveTagName(tagName);\n\n  if (caseSensitiveTagName) {\n    return caseSensitiveTagName;\n  }\n\n  return tagName;\n}\n/**\n * Formats the browser DOM nodes to mimic the output of `htmlparser2.parseDOM()`.\n *\n * @param  {NodeList} nodes        - DOM nodes.\n * @param  {Element}  [parentNode] - Formatted parent node.\n * @param  {string}   [directive]  - Directive.\n * @return {Array<Comment|Element|ProcessingInstruction|Text>}\n */\n\n\nfunction formatDOM(domNodes, parentNode, directive) {\n  parentNode = parentNode || null;\n  var domNode;\n  var node;\n  var prevNode;\n  var output = [];\n\n  for (var i = 0, len = domNodes.length; i < len; i++) {\n    domNode = domNodes[i]; // set the node data given the type\n\n    switch (domNode.nodeType) {\n      case 1:\n        // script, style, or tag\n        node = new Element(formatTagName(domNode.nodeName), formatAttributes(domNode.attributes));\n        node.children = formatDOM(domNode.childNodes, node);\n        break;\n\n      case 3:\n        node = new Text(domNode.nodeValue);\n        break;\n\n      case 8:\n        node = new Comment(domNode.nodeValue);\n        break;\n    } // set next for previous node\n\n\n    prevNode = output[i - 1] || null;\n\n    if (prevNode) {\n      prevNode.next = node;\n    } // set properties for current node\n\n\n    node.parent = parentNode;\n    node.prev = prevNode;\n    node.next = null;\n    output.push(node);\n  }\n\n  if (directive) {\n    node = new ProcessingInstruction(directive.substring(0, directive.indexOf(' ')).toLowerCase(), directive);\n    node.next = output[0] || null;\n    node.parent = parentNode;\n    output.unshift(node);\n\n    if (output[1]) {\n      output[1].prev = output[0];\n    }\n  }\n\n  return output;\n}\n/**\n * Detects if browser is Internet Explorer.\n *\n * @param  {number}  [version] - IE version to detect.\n * @return {boolean}           - Whether IE or the version is detected.\n */\n\n\nfunction isIE(version) {\n  if (version) {\n    return document.documentMode === version;\n  }\n\n  return /(MSIE |Trident\\/|Edge\\/)/.test(navigator.userAgent);\n}\n\nmodule.exports = {\n  formatAttributes: formatAttributes,\n  formatDOM: formatDOM,\n  isIE: isIE\n};","map":{"version":3,"sources":["C:/Users/jminh/Desktop/davidReact/my-app/node_modules/html-dom-parser/lib/utilities.js"],"names":["constants","require","domhandler","CASE_SENSITIVE_TAG_NAMES","Comment","Element","ProcessingInstruction","Text","caseSensitiveTagNamesMap","tagName","i","len","length","toLowerCase","getCaseSensitiveTagName","formatAttributes","attributes","result","attribute","name","value","formatTagName","caseSensitiveTagName","formatDOM","domNodes","parentNode","directive","domNode","node","prevNode","output","nodeType","nodeName","children","childNodes","nodeValue","next","parent","prev","push","substring","indexOf","unshift","isIE","version","document","documentMode","test","navigator","userAgent","module","exports"],"mappings":"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","sourcesContent":["var constants = require('./constants');\nvar domhandler = require('domhandler/lib/node');\n\nvar CASE_SENSITIVE_TAG_NAMES = constants.CASE_SENSITIVE_TAG_NAMES;\n\nvar Comment = domhandler.Comment;\nvar Element = domhandler.Element;\nvar ProcessingInstruction = domhandler.ProcessingInstruction;\nvar Text = domhandler.Text;\n\nvar caseSensitiveTagNamesMap = {};\nvar tagName;\n\nfor (var i = 0, len = CASE_SENSITIVE_TAG_NAMES.length; i < len; i++) {\n  tagName = CASE_SENSITIVE_TAG_NAMES[i];\n  caseSensitiveTagNamesMap[tagName.toLowerCase()] = tagName;\n}\n\n/**\n * Gets case-sensitive tag name.\n *\n * @param  {string}           tagName - Tag name in lowercase.\n * @return {string|undefined}         - Case-sensitive tag name.\n */\nfunction getCaseSensitiveTagName(tagName) {\n  return caseSensitiveTagNamesMap[tagName];\n}\n\n/**\n * Formats DOM attributes to a hash map.\n *\n * @param  {NamedNodeMap} attributes - List of attributes.\n * @return {object}                  - Map of attribute name to value.\n */\nfunction formatAttributes(attributes) {\n  var result = {};\n  var attribute;\n  // `NamedNodeMap` is array-like\n  for (var i = 0, len = attributes.length; i < len; i++) {\n    attribute = attributes[i];\n    result[attribute.name] = attribute.value;\n  }\n  return result;\n}\n\n/**\n * Corrects the tag name if it is case-sensitive (SVG).\n * Otherwise, returns the lowercase tag name (HTML).\n *\n * @param  {string} tagName - Lowercase tag name.\n * @return {string}         - Formatted tag name.\n */\nfunction formatTagName(tagName) {\n  tagName = tagName.toLowerCase();\n  var caseSensitiveTagName = getCaseSensitiveTagName(tagName);\n  if (caseSensitiveTagName) {\n    return caseSensitiveTagName;\n  }\n  return tagName;\n}\n\n/**\n * Formats the browser DOM nodes to mimic the output of `htmlparser2.parseDOM()`.\n *\n * @param  {NodeList} nodes        - DOM nodes.\n * @param  {Element}  [parentNode] - Formatted parent node.\n * @param  {string}   [directive]  - Directive.\n * @return {Array<Comment|Element|ProcessingInstruction|Text>}\n */\nfunction formatDOM(domNodes, parentNode, directive) {\n  parentNode = parentNode || null;\n\n  var domNode;\n  var node;\n  var prevNode;\n  var output = [];\n\n  for (var i = 0, len = domNodes.length; i < len; i++) {\n    domNode = domNodes[i];\n\n    // set the node data given the type\n    switch (domNode.nodeType) {\n      case 1:\n        // script, style, or tag\n        node = new Element(\n          formatTagName(domNode.nodeName),\n          formatAttributes(domNode.attributes)\n        );\n        node.children = formatDOM(domNode.childNodes, node);\n        break;\n\n      case 3:\n        node = new Text(domNode.nodeValue);\n        break;\n\n      case 8:\n        node = new Comment(domNode.nodeValue);\n        break;\n    }\n\n    // set next for previous node\n    prevNode = output[i - 1] || null;\n    if (prevNode) {\n      prevNode.next = node;\n    }\n\n    // set properties for current node\n    node.parent = parentNode;\n    node.prev = prevNode;\n    node.next = null;\n\n    output.push(node);\n  }\n\n  if (directive) {\n    node = new ProcessingInstruction(\n      directive.substring(0, directive.indexOf(' ')).toLowerCase(),\n      directive\n    );\n    node.next = output[0] || null;\n    node.parent = parentNode;\n    output.unshift(node);\n\n    if (output[1]) {\n      output[1].prev = output[0];\n    }\n  }\n\n  return output;\n}\n\n/**\n * Detects if browser is Internet Explorer.\n *\n * @param  {number}  [version] - IE version to detect.\n * @return {boolean}           - Whether IE or the version is detected.\n */\nfunction isIE(version) {\n  if (version) {\n    return document.documentMode === version;\n  }\n  return /(MSIE |Trident\\/|Edge\\/)/.test(navigator.userAgent);\n}\n\nmodule.exports = {\n  formatAttributes: formatAttributes,\n  formatDOM: formatDOM,\n  isIE: isIE\n};\n"]},"metadata":{},"sourceType":"script"}